// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source=interface.go -destination=taskmanager_mock.go -package=dltask
//

// Package dltask is a generated GoMock package.
package dltask

import (
	context "context"
	reflect "reflect"

	taskmanager "github.com/WangWilly/labs-gin/pkgs/taskmanager"
	gomock "go.uber.org/mock/gomock"
)

// MockTaskManager is a mock of TaskManager interface.
type MockTaskManager struct {
	ctrl     *gomock.Controller
	recorder *MockTaskManagerMockRecorder
	isgomock struct{}
}

// MockTaskManagerMockRecorder is the mock recorder for MockTaskManager.
type MockTaskManagerMockRecorder struct {
	mock *MockTaskManager
}

// NewMockTaskManager creates a new mock instance.
func NewMockTaskManager(ctrl *gomock.Controller) *MockTaskManager {
	mock := &MockTaskManager{ctrl: ctrl}
	mock.recorder = &MockTaskManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskManager) EXPECT() *MockTaskManagerMockRecorder {
	return m.recorder
}

// CancelTask mocks base method.
func (m *MockTaskManager) CancelTask(taskID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelTask", taskID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelTask indicates an expected call of CancelTask.
func (mr *MockTaskManagerMockRecorder) CancelTask(taskID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelTask", reflect.TypeOf((*MockTaskManager)(nil).CancelTask), taskID)
}

// GetCtx mocks base method.
func (m *MockTaskManager) GetCtx() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCtx")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// GetCtx indicates an expected call of GetCtx.
func (mr *MockTaskManagerMockRecorder) GetCtx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCtx", reflect.TypeOf((*MockTaskManager)(nil).GetCtx))
}

// GetTaskProgress mocks base method.
func (m *MockTaskManager) GetTaskProgress(taskID string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTaskProgress", taskID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTaskProgress indicates an expected call of GetTaskProgress.
func (mr *MockTaskManagerMockRecorder) GetTaskProgress(taskID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTaskProgress", reflect.TypeOf((*MockTaskManager)(nil).GetTaskProgress), taskID)
}

// SubmitTask mocks base method.
func (m *MockTaskManager) SubmitTask(arg0 taskmanager.Task) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SubmitTask", arg0)
}

// SubmitTask indicates an expected call of SubmitTask.
func (mr *MockTaskManagerMockRecorder) SubmitTask(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitTask", reflect.TypeOf((*MockTaskManager)(nil).SubmitTask), arg0)
}
