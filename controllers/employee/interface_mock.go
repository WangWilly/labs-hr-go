// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source=interface.go -destination=interface_mock.go -package=employee
//

// Package employee is a generated GoMock package.
package employee

import (
	context "context"
	reflect "reflect"
	time "time"

	models "github.com/WangWilly/labs-gin/pkgs/models"
	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockTimeModule is a mock of TimeModule interface.
type MockTimeModule struct {
	ctrl     *gomock.Controller
	recorder *MockTimeModuleMockRecorder
	isgomock struct{}
}

// MockTimeModuleMockRecorder is the mock recorder for MockTimeModule.
type MockTimeModuleMockRecorder struct {
	mock *MockTimeModule
}

// NewMockTimeModule creates a new mock instance.
func NewMockTimeModule(ctrl *gomock.Controller) *MockTimeModule {
	mock := &MockTimeModule{ctrl: ctrl}
	mock.recorder = &MockTimeModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTimeModule) EXPECT() *MockTimeModuleMockRecorder {
	return m.recorder
}

// Now mocks base method.
func (m *MockTimeModule) Now() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Now")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Now indicates an expected call of Now.
func (mr *MockTimeModuleMockRecorder) Now() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Now", reflect.TypeOf((*MockTimeModule)(nil).Now))
}

// MockEmployeeInfoRepo is a mock of EmployeeInfoRepo interface.
type MockEmployeeInfoRepo struct {
	ctrl     *gomock.Controller
	recorder *MockEmployeeInfoRepoMockRecorder
	isgomock struct{}
}

// MockEmployeeInfoRepoMockRecorder is the mock recorder for MockEmployeeInfoRepo.
type MockEmployeeInfoRepoMockRecorder struct {
	mock *MockEmployeeInfoRepo
}

// NewMockEmployeeInfoRepo creates a new mock instance.
func NewMockEmployeeInfoRepo(ctrl *gomock.Controller) *MockEmployeeInfoRepo {
	mock := &MockEmployeeInfoRepo{ctrl: ctrl}
	mock.recorder = &MockEmployeeInfoRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmployeeInfoRepo) EXPECT() *MockEmployeeInfoRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockEmployeeInfoRepo) Create(ctx context.Context, tx *gorm.DB, data *models.EmployeeInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, tx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockEmployeeInfoRepoMockRecorder) Create(ctx, tx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockEmployeeInfoRepo)(nil).Create), ctx, tx, data)
}

// MustGet mocks base method.
func (m *MockEmployeeInfoRepo) MustGet(ctx context.Context, tx *gorm.DB, id int64) (*models.EmployeeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MustGet", ctx, tx, id)
	ret0, _ := ret[0].(*models.EmployeeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MustGet indicates an expected call of MustGet.
func (mr *MockEmployeeInfoRepoMockRecorder) MustGet(ctx, tx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustGet", reflect.TypeOf((*MockEmployeeInfoRepo)(nil).MustGet), ctx, tx, id)
}

// Save mocks base method.
func (m *MockEmployeeInfoRepo) Save(ctx context.Context, tx *gorm.DB, data *models.EmployeeInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, tx, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockEmployeeInfoRepoMockRecorder) Save(ctx, tx, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockEmployeeInfoRepo)(nil).Save), ctx, tx, data)
}

// MockEmployeePositionRepo is a mock of EmployeePositionRepo interface.
type MockEmployeePositionRepo struct {
	ctrl     *gomock.Controller
	recorder *MockEmployeePositionRepoMockRecorder
	isgomock struct{}
}

// MockEmployeePositionRepoMockRecorder is the mock recorder for MockEmployeePositionRepo.
type MockEmployeePositionRepoMockRecorder struct {
	mock *MockEmployeePositionRepo
}

// NewMockEmployeePositionRepo creates a new mock instance.
func NewMockEmployeePositionRepo(ctrl *gomock.Controller) *MockEmployeePositionRepo {
	mock := &MockEmployeePositionRepo{ctrl: ctrl}
	mock.recorder = &MockEmployeePositionRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmployeePositionRepo) EXPECT() *MockEmployeePositionRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockEmployeePositionRepo) Create(ctx context.Context, tx *gorm.DB, data *models.EmployeePosition, nowtime time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, tx, data, nowtime)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockEmployeePositionRepoMockRecorder) Create(ctx, tx, data, nowtime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockEmployeePositionRepo)(nil).Create), ctx, tx, data, nowtime)
}

// Get mocks base method.
func (m *MockEmployeePositionRepo) Get(ctx context.Context, tx *gorm.DB, id int64) (*models.EmployeePosition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, tx, id)
	ret0, _ := ret[0].(*models.EmployeePosition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockEmployeePositionRepoMockRecorder) Get(ctx, tx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockEmployeePositionRepo)(nil).Get), ctx, tx, id)
}

// GetCurrentByEmployeeID mocks base method.
func (m *MockEmployeePositionRepo) GetCurrentByEmployeeID(ctx context.Context, tx *gorm.DB, employeeID int64, nowtime time.Time) (*models.EmployeePosition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentByEmployeeID", ctx, tx, employeeID, nowtime)
	ret0, _ := ret[0].(*models.EmployeePosition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentByEmployeeID indicates an expected call of GetCurrentByEmployeeID.
func (mr *MockEmployeePositionRepoMockRecorder) GetCurrentByEmployeeID(ctx, tx, employeeID, nowtime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentByEmployeeID", reflect.TypeOf((*MockEmployeePositionRepo)(nil).GetCurrentByEmployeeID), ctx, tx, employeeID, nowtime)
}

// MustGet mocks base method.
func (m *MockEmployeePositionRepo) MustGet(ctx context.Context, tx *gorm.DB, id int64) (*models.EmployeePosition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MustGet", ctx, tx, id)
	ret0, _ := ret[0].(*models.EmployeePosition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MustGet indicates an expected call of MustGet.
func (mr *MockEmployeePositionRepoMockRecorder) MustGet(ctx, tx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MustGet", reflect.TypeOf((*MockEmployeePositionRepo)(nil).MustGet), ctx, tx, id)
}
