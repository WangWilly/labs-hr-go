// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source=interface.go -destination=interface_mock.go -package=attendance
//

// Package attendance is a generated GoMock package.
package attendance

import (
	context "context"
	reflect "reflect"
	time "time"

	models "github.com/WangWilly/labs-hr-go/pkgs/models"
	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockTimeModule is a mock of TimeModule interface.
type MockTimeModule struct {
	ctrl     *gomock.Controller
	recorder *MockTimeModuleMockRecorder
	isgomock struct{}
}

// MockTimeModuleMockRecorder is the mock recorder for MockTimeModule.
type MockTimeModuleMockRecorder struct {
	mock *MockTimeModule
}

// NewMockTimeModule creates a new mock instance.
func NewMockTimeModule(ctrl *gomock.Controller) *MockTimeModule {
	mock := &MockTimeModule{ctrl: ctrl}
	mock.recorder = &MockTimeModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTimeModule) EXPECT() *MockTimeModuleMockRecorder {
	return m.recorder
}

// Now mocks base method.
func (m *MockTimeModule) Now() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Now")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Now indicates an expected call of Now.
func (mr *MockTimeModuleMockRecorder) Now() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Now", reflect.TypeOf((*MockTimeModule)(nil).Now))
}

// MockEmployeePositionRepo is a mock of EmployeePositionRepo interface.
type MockEmployeePositionRepo struct {
	ctrl     *gomock.Controller
	recorder *MockEmployeePositionRepoMockRecorder
	isgomock struct{}
}

// MockEmployeePositionRepoMockRecorder is the mock recorder for MockEmployeePositionRepo.
type MockEmployeePositionRepoMockRecorder struct {
	mock *MockEmployeePositionRepo
}

// NewMockEmployeePositionRepo creates a new mock instance.
func NewMockEmployeePositionRepo(ctrl *gomock.Controller) *MockEmployeePositionRepo {
	mock := &MockEmployeePositionRepo{ctrl: ctrl}
	mock.recorder = &MockEmployeePositionRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmployeePositionRepo) EXPECT() *MockEmployeePositionRepoMockRecorder {
	return m.recorder
}

// GetCurrentByEmployeeID mocks base method.
func (m *MockEmployeePositionRepo) GetCurrentByEmployeeID(ctx context.Context, tx *gorm.DB, employeeID int64, nowtime time.Time) (*models.EmployeePosition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentByEmployeeID", ctx, tx, employeeID, nowtime)
	ret0, _ := ret[0].(*models.EmployeePosition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentByEmployeeID indicates an expected call of GetCurrentByEmployeeID.
func (mr *MockEmployeePositionRepoMockRecorder) GetCurrentByEmployeeID(ctx, tx, employeeID, nowtime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentByEmployeeID", reflect.TypeOf((*MockEmployeePositionRepo)(nil).GetCurrentByEmployeeID), ctx, tx, employeeID, nowtime)
}

// MockEmployeeAttendanceRepo is a mock of EmployeeAttendanceRepo interface.
type MockEmployeeAttendanceRepo struct {
	ctrl     *gomock.Controller
	recorder *MockEmployeeAttendanceRepoMockRecorder
	isgomock struct{}
}

// MockEmployeeAttendanceRepoMockRecorder is the mock recorder for MockEmployeeAttendanceRepo.
type MockEmployeeAttendanceRepoMockRecorder struct {
	mock *MockEmployeeAttendanceRepo
}

// NewMockEmployeeAttendanceRepo creates a new mock instance.
func NewMockEmployeeAttendanceRepo(ctrl *gomock.Controller) *MockEmployeeAttendanceRepo {
	mock := &MockEmployeeAttendanceRepo{ctrl: ctrl}
	mock.recorder = &MockEmployeeAttendanceRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmployeeAttendanceRepo) EXPECT() *MockEmployeeAttendanceRepoMockRecorder {
	return m.recorder
}

// CreateForClockIn mocks base method.
func (m *MockEmployeeAttendanceRepo) CreateForClockIn(ctx context.Context, tx *gorm.DB, employeeID, positionID int64, clockInTime time.Time) (*models.EmployeeAttendance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateForClockIn", ctx, tx, employeeID, positionID, clockInTime)
	ret0, _ := ret[0].(*models.EmployeeAttendance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateForClockIn indicates an expected call of CreateForClockIn.
func (mr *MockEmployeeAttendanceRepoMockRecorder) CreateForClockIn(ctx, tx, employeeID, positionID, clockInTime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateForClockIn", reflect.TypeOf((*MockEmployeeAttendanceRepo)(nil).CreateForClockIn), ctx, tx, employeeID, positionID, clockInTime)
}

// Last mocks base method.
func (m *MockEmployeeAttendanceRepo) Last(ctx context.Context, tx *gorm.DB, employeeID int64) (*models.EmployeeAttendance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Last", ctx, tx, employeeID)
	ret0, _ := ret[0].(*models.EmployeeAttendance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Last indicates an expected call of Last.
func (mr *MockEmployeeAttendanceRepoMockRecorder) Last(ctx, tx, employeeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Last", reflect.TypeOf((*MockEmployeeAttendanceRepo)(nil).Last), ctx, tx, employeeID)
}

// UpdateForClockOut mocks base method.
func (m *MockEmployeeAttendanceRepo) UpdateForClockOut(ctx context.Context, tx *gorm.DB, attendanceID int64, clockOutTime time.Time) (*models.EmployeeAttendance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateForClockOut", ctx, tx, attendanceID, clockOutTime)
	ret0, _ := ret[0].(*models.EmployeeAttendance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateForClockOut indicates an expected call of UpdateForClockOut.
func (mr *MockEmployeeAttendanceRepoMockRecorder) UpdateForClockOut(ctx, tx, attendanceID, clockOutTime any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateForClockOut", reflect.TypeOf((*MockEmployeeAttendanceRepo)(nil).UpdateForClockOut), ctx, tx, attendanceID, clockOutTime)
}
