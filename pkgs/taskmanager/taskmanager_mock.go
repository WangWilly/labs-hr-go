// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source=interface.go -destination=taskmanager_mock.go -package=taskmanager
//

// Package taskmanager is a generated GoMock package.
package taskmanager

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTask is a mock of Task interface.
type MockTask struct {
	ctrl     *gomock.Controller
	recorder *MockTaskMockRecorder
	isgomock struct{}
}

// MockTaskMockRecorder is the mock recorder for MockTask.
type MockTaskMockRecorder struct {
	mock *MockTask
}

// NewMockTask creates a new mock instance.
func NewMockTask(ctrl *gomock.Controller) *MockTask {
	mock := &MockTask{ctrl: ctrl}
	mock.recorder = &MockTaskMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTask) EXPECT() *MockTaskMockRecorder {
	return m.recorder
}

// Cancel mocks base method.
func (m *MockTask) Cancel() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Cancel")
}

// Cancel indicates an expected call of Cancel.
func (mr *MockTaskMockRecorder) Cancel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockTask)(nil).Cancel))
}

// Execute mocks base method.
func (m *MockTask) Execute() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Execute indicates an expected call of Execute.
func (mr *MockTaskMockRecorder) Execute() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockTask)(nil).Execute))
}

// GetID mocks base method.
func (m *MockTask) GetID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetID indicates an expected call of GetID.
func (mr *MockTaskMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockTask)(nil).GetID))
}

// GetProgress mocks base method.
func (m *MockTask) GetProgress() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProgress")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetProgress indicates an expected call of GetProgress.
func (mr *MockTaskMockRecorder) GetProgress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProgress", reflect.TypeOf((*MockTask)(nil).GetProgress))
}

// SetRetrySignal mocks base method.
func (m *MockTask) SetRetrySignal() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRetrySignal")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// SetRetrySignal indicates an expected call of SetRetrySignal.
func (mr *MockTaskMockRecorder) SetRetrySignal() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRetrySignal", reflect.TypeOf((*MockTask)(nil).SetRetrySignal))
}
